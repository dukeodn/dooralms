import{d as e,o as t,r as s,e as r,a as i,g as n,c as o,b as a,i as c,C as d,f as l,P as p,L as g}from"./settings-95915cde.js";import"./dom-utils-55c8e5bb.js";import"./dom-e194973c.js";import"./browser-d96520d8.js";import"./_tslib-6e8ca86b.js";import"./css-classes-f3f8ed66.js";import"./disposable-d2c2d283.js";import"./tooltip-07ecf610.js";class m extends d{constructor(e,t,s){super(e,t,s)}getChartType(){return l.pieChartName}get widget(){return super.widget}createWidgetBuilder(e,t,s){const r=this._dxBlazorViz.viz.dxPieChart;return function(t){s(new r(e,t))}}createWidgetSettingsConverter(){return new p}getLegendItemType(){return g.point}getChartOnPointClickHandler(){const e=this.dotNetHelper,t=this._selectionController;return s=>{const r=s.target;e.invokeMethodAsync("OnSeriesClickAsync",r.series.index,r.data,r.tag),t.selectPoint(r)}}}const u={init:function(e,t,s){return e?c(e,t,s,((e,t,s)=>new m(e,t,s))):Promise.resolve()},dispose:e,onSeriesVisibleChanged:t,render:s,exportToFile:r,exportToBase64AndGetLengthAsync:i,getBase64ImageChunk:n,clearBase64ImageData:o,resetSelection:a};export{u as default};

import{d as e,o as t,r as s,e as r,a as i,c as o,g as n,b as l,i as a,C as c,f as d,X as g,L as p}from"./settings-95915cde.js";import"./dom-utils-55c8e5bb.js";import"./dom-e194973c.js";import"./browser-d96520d8.js";import"./_tslib-6e8ca86b.js";import"./css-classes-f3f8ed66.js";import"./disposable-d2c2d283.js";import"./tooltip-07ecf610.js";class u extends c{constructor(e,t,s){super(e,t,s),this._pointClickArgs=null}get widget(){return super.widget}getChartType(){return d.xyChartName}createWidgetBuilder(e,t,s){const r=t.series.map((e=>e.category))[0],i="pie"===r||"donut"===r?this._dxBlazorViz.viz.dxPieChart:this._dxBlazorViz.viz.dxChart;return function(t){t.type=r,s(new i(e,t))}}createWidgetSettingsConverter(){return new g}configureSelectionController(e){void 0!==e.seriesSelectionMode&&this._selectionController.setSeriesSelectionMode(e.seriesSelectionMode),super.configureSelectionController(e)}getLegendItemType(){return p.series}getChartOnPointClickHandler(){return e=>{this._pointClickArgs=e}}getChartOnSeriesClickHandler(){return e=>{var t;const s=e.target,r=null===(t=this._pointClickArgs)||void 0===t?void 0:t.target;this.dotNetHelper.invokeMethodAsync("OnSeriesClickAsync",s.index,null==r?void 0:r.data,null==r?void 0:r.tag),this._pointClickArgs=null,this._selectionController.selectSeriesAndPoint(s,r)}}}const C={init:function(e,t,s){return e?a(e,t,s,((e,t,s)=>new u(e,t,s))):Promise.resolve()},dispose:e,onSeriesVisibleChanged:t,render:s,exportToFile:r,exportToBase64AndGetLengthAsync:i,clearBase64ImageData:o,getBase64ImageChunk:n,resetSelection:l};export{C as default};
